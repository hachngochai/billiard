{"version":3,"sources":["main.js"],"names":["console","clear","noise","seed","Math","random","ASSET_PREFIX","PI","PI2","Bodies","Body","Matter","Composite","Constraint","Events","Mouse","MouseConstraint","Render","Engine","Vector","World","white","red","black","COLORS","purple","blue","green","yellow","orange","brown","frame","INCH","FOOT","WIREFRAMES","BALL_DI","BALL_RAD","POCKET_DI","POCKET_RAD","WALL_RAD","TABLE_W","RETURN_H","TABLE_H","WALL_DI","VIEW_H","Ball","_ref","number","cueball","_classCallCheck","this","cue","eight","stripes","solids","pocketed","setInitialCoordinates","setRender","pos","positions","map","p","rel","x","y","color","render","fillStyle","lineWidth","setStatic","body","setVelocity","setPosition","position","update","enable","_ref2","disable","_ref3","circle","diameter","label","restitution","friction","density","angle","radians60Sin","sin","radians60","cos","pos1","postStartX","postStartY","radians60Cos","pos3","pos4","pos2","buildWall","buildPockets","boundsOptions","Table","hw","height","vw","hypot","h","build","bounds","rectangle","VIEW_W","buildBounds","slop","width","horTY","horizontalBlock","horBY","horLX","horRX","verTY","wallOptions","isStatic","verticalBlock","vertices","bottom","quarterW","top","wallVertices","left","fromVertices","right","verLX","verRX","verBY","pockets","pocketLeftX","pocketTopY","pocketOptions","pocketRightX","pocketBottomY","obj","halfH","clock","fireCount","placingCueball","_ref4","power","shouldFire","n2","perlin2","max","min","n1","n3","Player","points","count","Machine","concat","nameText","txt","denomText","Canvas","_ref5","context","_ref6","beginPath","arc","fill","_ref7","rad","strokeStyle","translate","rotate","stroke","moveTo","lineTo","wallBodies","_ref8","pocketBodies","drawSlate","drawWall","drawReturn","drawPockets","drawPoints","grad","createRadialGradient","addColorStop","felt","fillRect","gutter","pocket","_this","forEach","i","_ref9","j","save","_ref10","clip","clipOff","clipDiff","restore","_this2","_ref11","circleRadius","inc","xc1","xl1","xr1","xc2","xl2","xr2","x3","x4","y1","y2","yc3","yt3","yb3","coords","_this3","di","_ref12","maxDistance","cueX","cueY","atan2","angleCos","lineMinX","lineMinY","lineMaxX","lineMaxY","angleSin","newX","newY","forceX","forceY","lineCap","closePath","balls","_ref13","ballIds","len","length","ball","drawBall","a","offsetX","offsetY","shadowBlur","shadowOffsetY","shadowColor","e1","s2","e2","s1","Game","_ref14","_this4","world","canvas","sounds","machine","$score","$message","document","querySelector","table","ballNumbers","cueId","id","eightId","push","addBodiesToWorld","initEscapedBodiesRetrieval","reset","ballId","log","gameOver","mousedown","powerStep","powerDirection","players","playersAssigned","currentPlayerIdx","messages","turnText","pocketedThisTurn","pocketedStripes","pocketedSolids","_this5","updateDOM","_this6","add","walls","b","moving","placeCueball","strikeCueball","handlePocketedBall","shadowOffsetX","_ref15","tickPower","wasMoving","checkMovement","isMoving","movingCrosshair","drawTable","drawBalls","isMachineClick","isMachine","fire","tick","handleMousedown","drawIndicator","handleMouseup","drawMovingCrosshair","_this7","_ref16","pairs","_ref17","bodyA","bodyB","coll","handlePocketed","_this8","_ref18","collision","speed","axisBody","firstContact","rate","volume","vol","play","rail","restBalls","winner","isCue","filter","isEight","validFirstContact","_this9","currentPlayer","hasStripes","hasSolids","assign","setupCueball","otherPlayer","score","messageScratch","messageInvalidContact","switchTurns","aMachineBall","_this10","$button","createElement","innerHTML","addEventListener","remove","appendChild","scratchText","invalidContactText","_this11","rest","applyForce","distance","maxX","minX","maxY","minY","current","updatePlayerDOM","m","join","player","_this12","eightball","create","onEight","engine","timing","timeScale","element","options","wireframes","background","window","location","match","classList","src","img","Image","messageWin","mouse","handleGameOver","messageTurn","Howl","game","on","handleTickAfter","constraint","_ref19","_ref20","e","run","setInterval","_body$position","allBodies","winText"],"mappings":"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","file":"main.min.js","sourcesContent":["console.clear();\r\n\r\nnoise.seed(Math.random() * 1000);\r\n\r\nconst ASSET_PREFIX = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/111863/';\r\n\r\nconst PI = Math.PI,\r\nPI2 = PI * 2;\r\n\r\nconst // module aliases\r\nBodies = Matter.Bodies,\r\nBody = Matter.Body,\r\nComposite = Matter.Composite,\r\nConstraint = Matter.Constraint,\r\nEngine = Matter.Engine,\r\nEvents = Matter.Events,\r\nMouse = Matter.Mouse,\r\nMouseConstraint = Matter.MouseConstraint,\r\nRender = Matter.Render,\r\nVector = Matter.Vector,\r\nWorld = Matter.World;\r\n\r\nconst COLORS = {\r\n  white: 'white',\r\n  red: '#F44336',\r\n  black: '#212121',\r\n  purple: '#9C27B0',\r\n  blue: '#2196F3',\r\n  green: '#8bc34a',\r\n  yellow: '#FFC107',\r\n  orange: '#FF9800',\r\n  brown: '#795548',\r\n  felt: '#757575',\r\n  pocket: '#121212',\r\n  frame: '#3E2723' };\r\n\r\n\r\nconst WIREFRAMES = false,\r\nINCH = 12,\r\nFOOT = INCH * 12,\r\nBALL_DI = 2.4375 * INCH,\r\nBALL_RAD = BALL_DI / 2,\r\n// POCKET_DI = 3.5 * INCH,\r\nPOCKET_DI = 4.5 * INCH,\r\nPOCKET_RAD = POCKET_DI / 2,\r\nWALL_DI = 5 * INCH,\r\nWALL_RAD = WALL_DI / 2,\r\n// TABLE_W = 9 * FOOT,\r\nTABLE_W = 8 * FOOT,\r\n// TABLE_H = 4.5 * FOOT,\r\nTABLE_H = 3.5 * FOOT,\r\nRETURN_H = BALL_DI * 1.75,\r\nVIEW_W = WALL_DI * 2 + TABLE_W,\r\nVIEW_H = WALL_DI * 2 + TABLE_H + RETURN_H;\r\n\r\nclass Ball {\r\n  constructor({ number, cueball }) {\r\n    this.cue = number === 0;\r\n    this.eight = number === 8;\r\n    this.stripes = number > 8;\r\n    this.solids = number > 0 && number < 8;\r\n    this.number = number;\r\n    this.diameter = BALL_DI;\r\n    this.pocketed = false;\r\n    this.setInitialCoordinates();\r\n    this.setRender();\r\n    this.setColor();\r\n    this.cueball = cueball;\r\n    this.build();\r\n  }\r\n\r\n  get fromCueball() {\r\n    return {\r\n      angle: Vector.angle(this.body.position, this.cueball.body.position) };\r\n\r\n  }\r\n\r\n  setInitialCoordinates() {\r\n    let pos = Ball.positions[this.number].map(p => rel(p));\r\n    this.x = pos[0];\r\n    this.y = pos[1];\r\n  }\r\n\r\n  setColor() {\r\n    this.color = COLORS[[\r\n    'white',\r\n    'yellow', 'blue', 'red', 'purple', 'orange', 'green', 'brown',\r\n    'black',\r\n    'yellow', 'blue', 'red', 'purple', 'orange', 'green', 'brown'][\r\n    this.number]];\r\n  }\r\n\r\n  setRender() {\r\n    this.render = { fillStyle: 'transparent', lineWidth: 0 };\r\n  }\r\n\r\n  enable() {\r\n    Body.setStatic(this.body, false);\r\n    this.pocketed = false;\r\n    this.body.isSensor = false;\r\n  }\r\n\r\n  disable() {\r\n    if (!this.cue) Body.setStatic(this.body, true);\r\n    this.pocketed = true;\r\n    this.body.isSensor = true;\r\n  }\r\n\r\n  rest() {\r\n    this.setVelocity({ x: 0, y: 0 });\r\n    Body.setPosition(this.body, this.body.position);\r\n    Body.update(this.body, 0, 0, 0);\r\n  }\r\n\r\n  reset() {\r\n    this.enable();\r\n    this.setVelocity({ x: 0, y: 0 });\r\n    Body.setPosition(this.body, { x: this.x, y: this.y });\r\n  }\r\n\r\n  pocket({ x, y }) {\r\n    this.disable();\r\n    Body.setVelocity(this.body, { x: 0, y: 0 });\r\n    Body.setAngle(this.body, 0);\r\n    Body.setPosition(this.body, { x, y });\r\n    Body.update(this.body, 0, 0, 0);\r\n  }\r\n\r\n  setVelocity({ x, y }) {\r\n    Body.setVelocity(this.body, { x, y });\r\n  }\r\n\r\n  build() {\r\n    this.body = Bodies.circle(\r\n    this.x, this.y,\r\n    this.diameter / 2,\r\n    {\r\n      render: this.render,\r\n      label: 'ball',\r\n      restitution: 0.9,\r\n      friction: 0.001,\r\n      density: this.cue ? 0.00021 : 0.0002 });\r\n\r\n\r\n  }\r\n\r\n  static get positions() {\r\n    let radians60 = 60 * (Math.PI / 180),\r\n    radians60Sin = Math.sin(radians60),\r\n    radians60Cos = Math.cos(radians60);\r\n\r\n    let postStartX = TABLE_W - TABLE_W / 4,\r\n    postStartY = TABLE_H / 2,\r\n    pos1 = [postStartX, postStartY],\r\n    pos2 = [postStartX + radians60Sin * BALL_DI,\r\n    postStartY - radians60Cos * BALL_DI],\r\n    pos3 = [postStartX + radians60Sin * (BALL_DI * 2),\r\n    postStartY - radians60Cos * (BALL_DI * 2)],\r\n    pos4 = [postStartX + radians60Sin * (BALL_DI * 3),\r\n    postStartY - radians60Cos * (BALL_DI * 3)],\r\n    pos5 = [postStartX + radians60Sin * (BALL_DI * 4),\r\n    postStartY - radians60Cos * (BALL_DI * 4)];\r\n    return [\r\n    [// cue\r\n    TABLE_W / 4, TABLE_H / 2],\r\n    pos1, // 1\r\n    pos2, // 2\r\n    pos3, // 3\r\n    pos4, // 4\r\n    [// 5\r\n    pos1[0] + radians60Sin * (BALL_DI * 4),\r\n    pos1[1] + radians60Cos * (BALL_DI * 4)],\r\n    [// 6\r\n    pos4[0] + radians60Sin * BALL_DI,\r\n    pos4[1] + radians60Cos * BALL_DI],\r\n    [// 7\r\n    pos2[0] + radians60Sin * BALL_DI * 2,\r\n    pos2[1] + radians60Cos * BALL_DI * 2],\r\n    [// 8\r\n    pos2[0] + radians60Sin * BALL_DI,\r\n    pos2[1] + radians60Cos * BALL_DI],\r\n    [// 9\r\n    pos1[0] + radians60Sin * BALL_DI,\r\n    pos1[1] + radians60Cos * BALL_DI],\r\n    [// 10\r\n    pos1[0] + radians60Sin * (BALL_DI * 2),\r\n    pos1[1] + radians60Cos * (BALL_DI * 2)],\r\n    [// 11\r\n    pos1[0] + radians60Sin * (BALL_DI * 3),\r\n    pos1[1] + radians60Cos * (BALL_DI * 3)],\r\n    pos5, // 12\r\n    [// 13\r\n    pos2[0] + radians60Sin * (BALL_DI * 3),\r\n    pos2[1] + radians60Cos * (BALL_DI * 3)],\r\n    [// 14\r\n    pos3[0] + radians60Sin * BALL_DI,\r\n    pos3[1] + radians60Cos * BALL_DI],\r\n    [// 15\r\n    pos3[0] + radians60Sin * (BALL_DI * 2),\r\n    pos3[1] + radians60Cos * (BALL_DI * 2)]];\r\n\r\n  }}\r\n\r\n\r\nclass Table {\r\n  constructor() {\r\n    this.width = TABLE_W;\r\n    this.height = TABLE_H;\r\n    this.hypot = Math.hypot(TABLE_W, TABLE_H);\r\n    this.build();\r\n  }\r\n\r\n  build() {\r\n    this.buildBounds();\r\n    this.buildWall();\r\n    this.buildPockets();\r\n  }\r\n\r\n  buildBounds() {\r\n    let boundsOptions = {\r\n      isStatic: true,\r\n      render: { fillStyle: 'red' },\r\n      label: 'bounds',\r\n      friction: 1,\r\n      restitution: 0,\r\n      density: 1 };\r\n\r\n    let hw = VIEW_W + VIEW_H * 2;\r\n    let vw = VIEW_H;\r\n    let h = VIEW_H;\r\n\r\n    this.bounds = [\r\n    // Top\r\n    Bodies.rectangle(VIEW_W * 0.5, h * -0.5, hw, h, boundsOptions),\r\n    // Bottom\r\n    Bodies.rectangle(VIEW_W * 0.5, VIEW_H + h * 0.5, hw, h, boundsOptions),\r\n    // Left\r\n    Bodies.rectangle(vw * -0.5, VIEW_H * 0.5, vw, h, boundsOptions),\r\n    // Left\r\n    Bodies.rectangle(VIEW_W + vw * 0.5, VIEW_H * 0.5, vw, h, boundsOptions)];\r\n\r\n  }\r\n\r\n  buildWall() {\r\n    let wallOptions = {\r\n      isStatic: true,\r\n      render: { fillStyle: 'transparent' },\r\n      label: 'wall',\r\n      friction: 0.0025,\r\n      restitution: 0.6,\r\n      density: 0.125,\r\n      slop: 0.5 };\r\n\r\n\r\n    let quarterW = (TABLE_W - POCKET_RAD * 2) / 4;\r\n    let halfH = (TABLE_H - POCKET_RAD) / 2;\r\n    let vertices = Table.wallVertices;\r\n    let horizontalBlock = { width: WALL_DI * 1.5, height: WALL_DI - POCKET_RAD };\r\n    let verticalBlock = { width: WALL_DI - POCKET_RAD, height: WALL_DI * 1.5 };\r\n    let middleBlock = { width: WALL_DI - POCKET_RAD, height: WALL_DI - POCKET_RAD };\r\n    let horTY = horizontalBlock.height / 2,\r\n    horBY = rel(TABLE_H + WALL_DI - horizontalBlock.height / 2),\r\n    horLX = horizontalBlock.width / 2,\r\n    horRX = rel(TABLE_W + WALL_DI - horizontalBlock.width / 2),\r\n    verTY = verticalBlock.height / 2,\r\n    verBY = rel(TABLE_H + WALL_DI - verticalBlock.height / 2),\r\n    verLX = verticalBlock.width / 2,\r\n    verRX = rel(TABLE_W + WALL_DI - verticalBlock.width / 2);\r\n\r\n    this.walls = [\r\n    // Bottom Left\r\n    Bodies.fromVertices(rel(TABLE_W / 4), rel(TABLE_H + WALL_RAD), vertices.bottom, wallOptions),\r\n    // Bottom Right\r\n    Bodies.fromVertices(rel(TABLE_W / 4 + TABLE_W / 2), rel(TABLE_H + WALL_RAD), vertices.bottom, wallOptions),\r\n    // Top Left\r\n    Bodies.fromVertices(rel(TABLE_W / 4), rel(0 - WALL_RAD), vertices.top, wallOptions),\r\n    // Top Right\r\n    Bodies.fromVertices(rel(TABLE_W / 4 + TABLE_W / 2), rel(0 - WALL_RAD), vertices.top, wallOptions),\r\n    // Left\r\n    Bodies.fromVertices(rel(0 - WALL_RAD), rel(TABLE_H / 2), vertices.left, wallOptions),\r\n    // Right\r\n    Bodies.fromVertices(rel(TABLE_W + WALL_RAD), rel(TABLE_H / 2), vertices.right, wallOptions),\r\n    // TL horizontal\r\n    Bodies.rectangle(horLX, horTY, horizontalBlock.width, horizontalBlock.height, wallOptions),\r\n    // TR horizontal\r\n    Bodies.rectangle(horRX, horTY, horizontalBlock.width, horizontalBlock.height, wallOptions),\r\n    // BL horizontal\r\n    Bodies.rectangle(horLX, horBY, horizontalBlock.width, horizontalBlock.height, wallOptions),\r\n    // BR horizontal\r\n    Bodies.rectangle(horRX, horBY, horizontalBlock.width, horizontalBlock.height, wallOptions),\r\n    // TL vertical\r\n    Bodies.rectangle(verLX, verTY, verticalBlock.width, verticalBlock.height, wallOptions),\r\n    // TR vertical\r\n    Bodies.rectangle(verRX, verTY, verticalBlock.width, verticalBlock.height, wallOptions),\r\n    // BL vertical\r\n    Bodies.rectangle(verLX, verBY, verticalBlock.width, verticalBlock.height, wallOptions),\r\n    // BR vertical\r\n    Bodies.rectangle(verRX, verBY, verticalBlock.width, verticalBlock.height, wallOptions),\r\n    // B middle\r\n    Bodies.rectangle(rel(TABLE_W / 2), horBY, middleBlock.width, middleBlock.height, wallOptions),\r\n    // T middle\r\n    Bodies.rectangle(rel(TABLE_W / 2), horTY, middleBlock.width, middleBlock.height, wallOptions)];\r\n\r\n  }\r\n\r\n  buildPockets() {\r\n    let pocketOptions = {\r\n      render: { fillStyle: 'transparent', lineWidth: 0 },\r\n      label: 'pocket',\r\n      isSensor: true };\r\n\r\n    let pocketTopY = WALL_DI * 0.75;\r\n    let pocketBottomY = TABLE_H + WALL_DI * 1.25;\r\n    let pocketLeftX = WALL_DI * 0.75;\r\n    let pocketRightX = TABLE_W + WALL_DI * 1.25;\r\n    this.pockets = [\r\n    Bodies.circle(pocketLeftX, pocketTopY, POCKET_RAD, pocketOptions),\r\n    Bodies.circle(TABLE_W / 2 + WALL_DI, pocketTopY, POCKET_RAD, pocketOptions),\r\n    Bodies.circle(pocketRightX, pocketTopY, POCKET_RAD, pocketOptions),\r\n    Bodies.circle(pocketLeftX, pocketBottomY, POCKET_RAD, pocketOptions),\r\n    Bodies.circle(TABLE_W / 2 + WALL_DI, pocketBottomY, POCKET_RAD, pocketOptions),\r\n    Bodies.circle(pocketRightX, pocketBottomY, POCKET_RAD, pocketOptions)];\r\n\r\n  }\r\n\r\n  static get wallVertices() {\r\n    let obj = {};\r\n    let quarterW = (TABLE_W - POCKET_RAD * 2) / 4;\r\n    let halfH = (TABLE_H - POCKET_RAD) / 2;\r\n    obj.bottom = [\r\n    { x: -quarterW, y: WALL_DI },\r\n    { x: quarterW, y: WALL_DI },\r\n    { x: quarterW, y: POCKET_RAD },\r\n    { x: quarterW - POCKET_RAD, y: 0 },\r\n    { x: -quarterW + POCKET_RAD, y: 0 },\r\n    { x: -quarterW, y: POCKET_RAD }];\r\n\r\n    obj.top = [\r\n    { x: -quarterW, y: 0 },\r\n    { x: quarterW, y: 0 },\r\n    { x: quarterW, y: WALL_DI - POCKET_RAD },\r\n    { x: quarterW - POCKET_RAD, y: WALL_DI },\r\n    { x: -quarterW + POCKET_RAD, y: WALL_DI },\r\n    { x: -quarterW, y: WALL_DI - POCKET_RAD }];\r\n\r\n    obj.left = [\r\n    { y: -halfH, x: 0 },\r\n    { y: halfH, x: 0 },\r\n    { y: halfH, x: WALL_DI - POCKET_RAD },\r\n    { y: halfH - POCKET_RAD, x: WALL_DI },\r\n    { y: -halfH + POCKET_RAD, x: WALL_DI },\r\n    { y: -halfH, x: WALL_DI - POCKET_RAD }];\r\n\r\n    obj.right = [\r\n    { y: -halfH, x: WALL_DI },\r\n    { y: halfH, x: WALL_DI },\r\n    { y: halfH, x: POCKET_RAD },\r\n    { y: halfH - POCKET_RAD, x: 0 },\r\n    { y: -halfH + POCKET_RAD, x: 0 },\r\n    { y: -halfH, x: POCKET_RAD }];\r\n\r\n    return obj;\r\n  }}\r\n\r\n\r\nclass Machine {\r\n  constructor() {\r\n    this.clock = 0;\r\n    this.fireCount = 0;\r\n    this.x = rel(TABLE_W * 0.5);\r\n    this.y = rel(TABLE_H * 0.5);\r\n  }\r\n\r\n  reset({ x, y }, placingCueball) {\r\n    if (placingCueball) {\r\n      this.x = rel(TABLE_W * 0.5);\r\n      this.y = rel(TABLE_H * 0.5);\r\n    } else {\r\n      this.x = x;\r\n      this.y = y;\r\n    }\r\n    this.power = 0;\r\n  }\r\n\r\n  fire() {\r\n    if (this.fireCount > 100) {\r\n      this.fireCount = 0;\r\n      return true;\r\n    }\r\n    let shouldFire = Math.random() < 0.0125;\r\n    if (shouldFire)\r\n    this.fireCount = 0;else\r\n\r\n    this.fireCount++;\r\n    return shouldFire;\r\n  }\r\n\r\n  tick() {\r\n    let n1 = noise.perlin2(this.clock, this.clock);\r\n    let n2 = noise.perlin2(this.clock + 100, this.clock + 100);\r\n    let n3 = noise.perlin2(this.clock + 1000, this.clock + 1000);\r\n    let max = 16;\r\n    this.x = Math.max(Math.min(this.x + n1 * max, rel(TABLE_W)), rel(0));\r\n    this.y = Math.max(Math.min(this.y + n2 * max, rel(TABLE_H)), rel(0));\r\n    this.clock += 0.02;\r\n    this.power = (n3 + 1) * 0.5 * 0.8 + 0.2;\r\n  }}\r\n\r\n\r\nclass Player {\r\n  constructor(number) {\r\n    this.number = number;\r\n    this.stripes = false;\r\n    this.solids = false;\r\n    this.points = 0;\r\n  }\r\n\r\n  get onEight() {\r\n    return this.points === 7;\r\n  }\r\n\r\n  get winner() {\r\n    return this.points === 8;\r\n  }\r\n\r\n  get denomText() {\r\n    if (this.stripes) return 'Stripes';\r\n    if (this.solids) return 'Solids';\r\n    return '';\r\n  }\r\n\r\n  get invalidContactText() {\r\n    if (this.stripes) return `${this.nameText} did not hit a Stripe first.`;\r\n    if (this.solids) return `${this.nameText} did not hit a Solid first.`;\r\n  }\r\n\r\n  get nameText() {\r\n    if (this.number === 1) return '<strong>You</strong>';\r\n    return '<strong>AI</strong>';\r\n  }\r\n\r\n  get eightText() {\r\n    return `${this.nameText} Pocketed the Eight.`;\r\n  }\r\n\r\n  get scratchText() {\r\n    return `${this.nameText} Scratched!`;\r\n  }\r\n\r\n  get turnText() {\r\n    let txt = this.number === 1 ? 'Your' : 'AI\\'s';\r\n    txt = `<strong>${txt}</strong>`;\r\n    txt += ' Turn ';\r\n    if (this.stripes || this.solids) txt += `(${this.denomText})`;\r\n    return txt;\r\n  }\r\n\r\n  get winText() {\r\n    if (this.number === 1) return '<strong>You</strong> Win!';\r\n    return '<strong>AI</strong> Wins!';\r\n  }\r\n\r\n  get teamText() {\r\n    return `${this.nameText} is ${this.denomText}`;\r\n  }\r\n\r\n  assign(stripes) {\r\n    stripes ? this.stripes = true : this.solids = true;\r\n  }\r\n\r\n  score(count) {\r\n    this.points += count;\r\n  }}\r\n\r\n\r\nclass Canvas {\r\n  constructor({ context }) {\r\n    this.context = context;\r\n  }\r\n\r\n  drawCrosshair({ x, y }) {\r\n    this.context.fillStyle = 'rgba(255, 255, 255, 0.25)';\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, BALL_RAD, 0, PI2, false);\r\n    this.context.fill();\r\n  }\r\n\r\n  drawMovingCrosshair({ x, y }) {\r\n    let rad = BALL_RAD - 2;\r\n    this.context.strokeStyle = COLORS.red;\r\n    this.context.lineWidth = 4;\r\n    this.context.translate(x, y);\r\n    this.context.rotate(-PI * 0.25);\r\n    // circle\r\n    this.context.beginPath();\r\n    this.context.arc(0, 0, rad, 0, PI2, false);\r\n    this.context.stroke();\r\n    // slash\r\n    this.context.beginPath();\r\n    this.context.moveTo(0, (BALL_RAD + 2) * -0.5);\r\n    this.context.lineTo(0, (BALL_RAD + 2) * 0.5);\r\n    this.context.stroke();\r\n    // rotating back\r\n    this.context.rotate(PI * 0.25);\r\n    this.context.translate(-x, -y);\r\n\r\n  }\r\n\r\n  drawTable({ wallBodies, pocketBodies }) {\r\n    this.drawSlate();\r\n    this.drawWall(wallBodies);\r\n    this.drawReturn();\r\n    this.drawPockets(pocketBodies);\r\n    this.drawPoints();\r\n  }\r\n\r\n  drawSlate() {\r\n    let grad = this.context.createRadialGradient(\r\n    VIEW_W * 0.5, (VIEW_H - RETURN_H) * 0.5, TABLE_H * 0.75 * 0.125,\r\n    VIEW_W * 0.5, (VIEW_H - RETURN_H) * 0.5, TABLE_H * 0.75 * 1.5);\r\n\r\n    grad.addColorStop(0, 'rgba(255,255,255,0.05)');\r\n    grad.addColorStop(0.25, 'rgba(255,255,255,0.05)');\r\n    grad.addColorStop(1, 'rgba(255,255,255,0.15)');\r\n\r\n    this.context.fillStyle = COLORS.felt;\r\n    this.context.fillRect(WALL_RAD, WALL_RAD, TABLE_W + WALL_DI, TABLE_H + WALL_DI);\r\n    this.context.fillStyle = grad;\r\n    this.context.fillRect(WALL_RAD, WALL_RAD, TABLE_W + WALL_DI, TABLE_H + WALL_DI);\r\n  }\r\n\r\n  drawReturn() {\r\n    let gutter = (RETURN_H - BALL_DI * 1.2) * 0.5;\r\n    this.context.fillStyle = COLORS.pocket;\r\n    this.context.fillRect(\r\n    gutter, VIEW_H - RETURN_H + gutter,\r\n    VIEW_W - gutter * 2, RETURN_H - gutter * 2);\r\n\r\n  }\r\n\r\n  drawWall(wallBodies) {\r\n    this.context.fillStyle = COLORS.frame;\r\n    wallBodies.forEach((body, i) => {\r\n      this.context.beginPath();\r\n      body.vertices.forEach(({ x, y }, j) => {\r\n        if (j === 0) {\r\n          this.context.moveTo(x, y);\r\n        } else {\r\n          this.context.lineTo(x, y);\r\n        }\r\n      });\r\n      this.context.fill();\r\n\r\n      // BUMPERS\r\n      this.context.save();\r\n      this.context.beginPath();\r\n      body.vertices.forEach(({ x, y }, j) => {\r\n        if (j === 0) {\r\n          this.context.moveTo(x, y);\r\n        } else {\r\n          this.context.lineTo(x, y);\r\n        }\r\n      });\r\n      this.context.clip();\r\n      this.context.fillStyle = '#787878';\r\n      let clipOff = WALL_DI * 0.75;\r\n      let clipDiff = WALL_DI - clipOff;\r\n      this.context.fillRect(clipOff, clipOff, TABLE_W + clipDiff * 2, TABLE_H + clipDiff * 2);\r\n      this.context.restore();\r\n    });\r\n  }\r\n\r\n  drawPockets(pocketBodies) {\r\n    this.context.fillStyle = COLORS.pocket;\r\n    pocketBodies.forEach(({ position, circleRadius }) => {\r\n      this.context.beginPath();\r\n      this.context.arc(position.x, position.y, circleRadius, 0, PI2, false);\r\n      this.context.fill();\r\n    });\r\n  }\r\n\r\n  drawPoints() {\r\n    let di = 10,\r\n    rad = di * 0.5,\r\n    inc = TABLE_W / 7,\r\n    xc1 = rel(TABLE_W * 0.25),\r\n    xl1 = xc1 - inc,\r\n    xr1 = xc1 + inc,\r\n    xc2 = xc1 + TABLE_W * 0.5,\r\n    xl2 = xc2 - inc,\r\n    xr2 = xc2 + inc,\r\n    x3 = WALL_RAD * 0.75,\r\n    x4 = rel(TABLE_W + WALL_RAD * 1.25),\r\n    y1 = WALL_RAD * 0.75,\r\n    y2 = rel(TABLE_H + WALL_RAD * 1.25),\r\n    yc3 = rel(TABLE_H * 0.5),\r\n    yt3 = yc3 - inc,\r\n    yb3 = yc3 + inc;\r\n    let positions = [\r\n    [xl1, y1], [xc1, y1], [xr1, y1],\r\n    [xl1, y2], [xc1, y2], [xr1, y2],\r\n    [xl2, y1], [xc2, y1], [xr2, y1],\r\n    [xl2, y2], [xc2, y2], [xr2, y2],\r\n    [x3, yt3], [x3, yc3], [x3, yb3],\r\n    [x4, yt3], [x4, yc3], [x4, yb3]];\r\n\r\n    this.context.fillStyle = COLORS.brown;\r\n    positions.forEach(coords => {\r\n      let x = coords[0],\r\n      y = coords[1];\r\n      this.context.beginPath();\r\n      this.context.moveTo(x, y - rad);\r\n      this.context.lineTo(x + rad, y);\r\n      this.context.lineTo(x, y + rad);\r\n      this.context.lineTo(x - rad, y);\r\n      this.context.fill();\r\n    });\r\n  }\r\n\r\n  drawIndicator({ x, y, cueball, power, maxDistance }) {\r\n    this.cueX = cueball.position.x;\r\n    this.cueY = cueball.position.y;\r\n    this.angle = Math.atan2(y - this.cueY, x - this.cueX);\r\n    this.angleCos = Math.cos(this.angle);\r\n    this.angleSin = Math.sin(this.angle);\r\n\r\n    // coordinates for starting power just off the cueball\r\n    let lineMinX = this.cueX + BALL_DI * 1.2 * this.angleCos;\r\n    let lineMinY = this.cueY + BALL_DI * 1.2 * this.angleSin;\r\n\r\n    // coordinates for showing power\r\n    let lineMaxX = lineMinX + maxDistance * this.angleCos;\r\n    let lineMaxY = lineMinY + maxDistance * this.angleSin;\r\n\r\n    // coordinates for calculating power\r\n    let newX = lineMinX + power * maxDistance * this.angleCos;\r\n    let newY = lineMinY + power * maxDistance * this.angleSin;\r\n\r\n    // setting the force relative to power\r\n    this.forceX = (newX - lineMinX) / maxDistance * 0.02;\r\n    this.forceY = (newY - lineMinY) / maxDistance * 0.02;\r\n\r\n    this.context.lineCap = 'round';\r\n\r\n    // max power\r\n    this.context.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n    this.context.lineWidth = 4;\r\n    this.context.beginPath();\r\n    this.context.moveTo(lineMinX, lineMinY);\r\n    this.context.lineTo(lineMaxX, lineMaxY);\r\n    this.context.stroke();\r\n    this.context.closePath();\r\n\r\n    // power level\r\n    this.context.strokeStyle = 'rgba(255, 255, 255, 0.9)';\r\n    this.context.lineWidth = 4;\r\n    this.context.beginPath();\r\n    this.context.moveTo(lineMinX, lineMinY);\r\n    this.context.lineTo(newX, newY);\r\n    this.context.stroke();\r\n    this.context.closePath();\r\n  }\r\n\r\n  drawBalls({ balls, ballIds }) {\r\n    let inAngle = [];\r\n    for (let i = 0, len = ballIds.length; i < len; i++) {\r\n      let ballId = ballIds[i];\r\n      let ball = balls[ballId];\r\n      this.drawBall(ball);\r\n    }\r\n  }\r\n\r\n  drawBall(ball) {\r\n    let x = ball.body.position.x,\r\n    y = ball.body.position.y,\r\n    rad = ball.body.circleRadius,\r\n    di = rad * 2,\r\n    a = ball.body.angle;\r\n\r\n    this.context.translate(x, y);\r\n    this.context.rotate(a);\r\n\r\n    // offset from center\r\n    let offsetX = (x - WALL_DI) / TABLE_W * 2 - 1,\r\n    offsetY = (y - WALL_DI) / TABLE_H * 2 - 1;\r\n\r\n    let grad = this.context.createRadialGradient(\r\n    rad * offsetX, rad * offsetY, rad * 0.125,\r\n    rad * offsetX, rad * offsetY, rad * 1.5);\r\n\r\n    if (ball.eight) {\r\n      grad.addColorStop(0, 'rgba(255,255,255,0.15)');\r\n      grad.addColorStop(1, 'rgba(255,255,255,0.05)');\r\n    } else {\r\n      grad.addColorStop(0, 'rgba(0,0,0,0.05)');\r\n      grad.addColorStop(1, 'rgba(0,0,0,0.3)');\r\n    }\r\n\r\n    this.context.shadowColor = 'rgba(0,0,0,0.05)';\r\n    this.context.shadowBlur = 2;\r\n    this.context.shadowOffsetX = -offsetX * BALL_RAD * 0.5;\r\n    this.context.shadowOffsetY = -offsetY * BALL_RAD * 0.5;\r\n\r\n    this.context.fillStyle = ball.color;\r\n    this.context.beginPath();\r\n    this.context.arc(0, 0, rad, 0, PI2, false);\r\n    this.context.fill();\r\n    this.context.shadowColor = 'transparent';\r\n\r\n    if (ball.stripes) {\r\n      let s1 = PI * 0.15,\r\n      e1 = PI - s1,\r\n      s2 = PI * -0.15,\r\n      e2 = PI - s2;\r\n      this.context.fillStyle = 'white';\r\n      this.context.beginPath();\r\n      this.context.arc(0, 0, rad, s1, e1, false);\r\n      this.context.fill();\r\n      this.context.beginPath();\r\n      this.context.arc(0, 0, rad, s2, e2, true);\r\n      this.context.fill();\r\n    }\r\n\r\n    this.context.rotate(-a);\r\n\r\n    this.context.beginPath();\r\n    this.context.arc(0, 0, rad, 0, PI2, false);\r\n    this.context.fillStyle = grad;\r\n    this.context.fill();\r\n\r\n    this.context.translate(-x, -y);\r\n  }}\r\n\r\n\r\nclass Game {\r\n  constructor({ world, canvas, sounds }) {\r\n    this.machine = new Machine();\r\n    this.sounds = sounds;\r\n    this.world = world;\r\n    this.canvas = canvas;\r\n    this.$score = document.querySelector('div.score');\r\n    this.$message = document.querySelector('div.message');\r\n    this.table = new Table();\r\n    this.balls = {};\r\n    this.ballIds = [];\r\n    this.ballNumbers.forEach(number => {\r\n      let ball = new Ball({ number, cueball: this.cueball });\r\n      if (ball.cue) this.cueId = ball.body.id;\r\n      if (ball.eight) this.eightId = ball.body.id;\r\n      this.balls[ball.body.id] = ball;\r\n      this.ballIds.push(ball.body.id);\r\n    });\r\n    this.addBodiesToWorld();\r\n    initEscapedBodiesRetrieval(this.ballIds.map(id => this.balls[id].body));\r\n    this.reset();\r\n  }\r\n\r\n  handleEscapedBall(ballId) {\r\n    console.log('ESCAPED', this.balls[ballId]);\r\n    this.balls[ballId].reset();\r\n  }\r\n\r\n  reset() {\r\n    this.gameOver = false;\r\n    this.break = true;\r\n    this.mousedown = false;\r\n    this.power = 0;\r\n    this.powerStep = 0.015;\r\n    this.powerDirection = 1;\r\n    this.players = [new Player(1), new Player(2)];\r\n    this.playersAssigned = false;\r\n    this.currentPlayerIdx = 0;\r\n\r\n    this.messages = [this.currentPlayer.turnText];\r\n\r\n    this.pocketedThisTurn = [];\r\n    this.pocketedStripes = 0;\r\n    this.pocketedSolids = 0;\r\n    this.placingCueball = true;\r\n    this.ballIds.forEach(ballId => this.balls[ballId].reset());\r\n    this.updateDOM();\r\n  }\r\n\r\n  get currentPlayer() {\r\n    return this.players[this.currentPlayerIdx % 2];\r\n  }\r\n\r\n  get otherPlayer() {\r\n    return this.players[(this.currentPlayerIdx + 1) % 2];\r\n  }\r\n\r\n  get isMachine() {\r\n    return this.currentPlayerIdx % 2 !== 0;\r\n  }\r\n\r\n  addBodiesToWorld() {\r\n    World.add(this.world, this.table.bounds);\r\n    World.add(this.world, this.table.walls);\r\n    World.add(this.world, this.table.pockets);\r\n    World.add(this.world, this.ballIds.map(b => this.balls[b].body));\r\n  }\r\n\r\n  handleMousedown() {\r\n    if (this.gameOver) return;\r\n    if (this.moving) return;\r\n    if (!this.placingCueball)\r\n    this.mousedown = true;\r\n  }\r\n\r\n  handleMouseup() {\r\n    if (this.gameOver) return;\r\n    this.mousedown = false;\r\n    if (this.moving) return;\r\n    if (this.placingCueball)\r\n    this.placeCueball();else\r\n\r\n    this.strikeCueball();\r\n  }\r\n\r\n  handlePocketed(ballId) {\r\n    let ball = this.balls[ballId];\r\n    if (ball.cue) this.setupCueball();\r\n    this.handlePocketedBall(ball);\r\n  }\r\n\r\n  handlePocketedBall(ball) {\r\n    this.pocketedThisTurn.push(ball);\r\n    let x,\r\n    y = VIEW_H - RETURN_H / 2;\r\n    if (ball.stripes) {\r\n      x = VIEW_W - this.pocketedStripes * (BALL_DI * 1.2) - RETURN_H * 0.5;\r\n      this.pocketedStripes++;\r\n    } else if (ball.solids) {\r\n      x = this.pocketedSolids * (BALL_DI * 1.2) + RETURN_H * 0.5;\r\n      this.pocketedSolids++;\r\n    } else if (ball.cue) {\r\n      x = VIEW_W * 0.5 + BALL_RAD * 1.1;\r\n    } else {// ball.eight\r\n      x = VIEW_W * 0.5 - BALL_RAD * 1.1;\r\n    }\r\n\r\n    ball.pocket({ x, y });\r\n  }\r\n\r\n  handleTickAfter({ x, y }) {\r\n    this.tickPower();\r\n    let power = this.power;\r\n    let wasMoving = this.moving;\r\n    this.checkMovement();\r\n    let isMoving = this.moving;\r\n    if (wasMoving && !isMoving) this.handleTurnEnd();\r\n\r\n    let movingCrosshair = { x, y };\r\n\r\n    this.canvas.drawTable({ wallBodies: this.table.walls, pocketBodies: this.table.pockets });\r\n    this.canvas.drawBalls({ balls: this.balls, ballIds: this.ballIds });\r\n\r\n    let isMachineClick = this.isMachine && this.machine.fire();\r\n    if (this.isMachine) {\r\n      this.machine.tick();\r\n      x = this.machine.x;y = this.machine.y;\r\n      power = this.machine.power;\r\n    }\r\n\r\n    if (isMachineClick) this.handleMousedown();\r\n    if (this.placingCueball) {\r\n      this.moveCueball(x, y);\r\n    } else if (!this.moving && !this.gameOver) {\r\n      this.canvas.drawIndicator({\r\n        x, y, power,\r\n        cueball: this.cueball.body,\r\n        maxDistance: this.table.height * 0.5 });\r\n\r\n    }\r\n    if (isMachineClick) this.handleMouseup();\r\n    if (isMoving || this.isMachine) this.canvas.drawMovingCrosshair(movingCrosshair);\r\n    if (!isMoving) this.canvas.drawCrosshair({ x, y });\r\n  }\r\n\r\n  handleCollisionActive({ pairs }) {\r\n    pairs.forEach(({ bodyA, bodyB }, i) => {\r\n      let coll = bodyA.label + bodyB.label;\r\n      if (coll === 'ballpocket' || coll == 'pocketball') {\r\n        let ball = bodyA.label === 'ball' ? bodyA : bodyB;\r\n        let distance = Math.hypot(\r\n        bodyA.position.y - bodyB.position.y,\r\n        bodyA.position.x - bodyB.position.x);\r\n\r\n        if (distance / BALL_DI <= 1)\r\n        this.handlePocketed(ball.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleCollisionStart({ pairs }) {\r\n    if (this.placingCueball) return;\r\n    pairs.forEach((collision, i) => {\r\n      let { bodyA, bodyB } = collision;\r\n      let speed = collision.collision.axisBody.speed;\r\n      let coll = bodyA.label + bodyB.label;\r\n      if (!this.firstContact && coll === 'ballball')\r\n      this.firstContact = [bodyA, bodyB];\r\n      if (coll === 'ballball') {\r\n        let vol = Math.min(0.5, speed) + 0.05;\r\n        let rate = Math.random() - 0.5 + 1;\r\n        this.sounds.ball.rate(rate);\r\n        this.sounds.ball.volume(vol);\r\n        this.sounds.ball.play();\r\n      } else if (coll === 'ballwall' || coll === 'wallball') {\r\n        let vol = Math.min(1, speed) * 0.8 + 0.2;\r\n        let rate = Math.random() - 0.5 + 0.75;\r\n        this.sounds.rail.rate(rate);\r\n        this.sounds.rail.volume(vol);\r\n        this.sounds.rail.play();\r\n      }\r\n    });\r\n  }\r\n\r\n  // logic for valid first contact, scoring, and game end.\r\n  handleTurnEnd() {\r\n    this.restBalls();\r\n    this.messages = [];\r\n    this.power = 0;\r\n    let pocketed = this.pocketedThisTurn;\r\n    let winner = null;\r\n\r\n    let isCue = pocketed.filter(b => b.cue).length > 0,\r\n    isEight = pocketed.filter(b => b.eight).length > 0;\r\n\r\n    // determining valid first contact\r\n    let validFirstContact = true;\r\n    if (this.firstContact) {\r\n      let balls = this.firstContact.map(b => this.balls[b.id]);\r\n      let ball = balls.filter(b => !b.cue)[0];\r\n      if (this.playersAssigned && !isCue && !isEight)\r\n      if (\r\n      this.currentPlayer.stripes && !ball.stripes ||\r\n      this.currentPlayer.solids && !ball.solids)\r\n      validFirstContact = false;\r\n      this.firstContact = null;\r\n    }\r\n\r\n    // handling pocketed balls\r\n    if (pocketed.length > 0) {\r\n      let stripes = pocketed.filter(b => b.stripes),\r\n      solids = pocketed.filter(b => b.solids),\r\n      hasStripes = stripes.length > 0,\r\n      hasSolids = solids.length > 0;\r\n\r\n      // assigning players\r\n      if (!this.playersAssigned) {\r\n        // only assign if one kind of ball went in and cueball and eightball were not pocketed\r\n        if ((!hasStripes || !hasSolids) && !isCue && !isEight) {\r\n          this.currentPlayer.assign(hasStripes);\r\n          this.otherPlayer.assign(!hasStripes);\r\n          this.playersAssigned = true;\r\n        }\r\n      }\r\n\r\n      // calculate scores\r\n      if (this.currentPlayer.stripes) {\r\n        this.currentPlayer.score(stripes.length);\r\n        this.otherPlayer.score(solids.length);\r\n      } else if (this.currentPlayer.solids) {\r\n        this.currentPlayer.score(solids.length);\r\n        this.otherPlayer.score(stripes.length);\r\n      }\r\n\r\n      // handling game over\r\n      if (isEight) {\r\n        this.messageEight();\r\n        winner = this.currentPlayer.onEight ? this.currentPlayer : this.otherPlayer;\r\n        // handling cueball\r\n      } else if (isCue) {\r\n        this.messageScratch();\r\n        this.switchTurns();\r\n        // handling invalid contact\r\n      } else if (!validFirstContact) {\r\n        this.messageInvalidContact();\r\n        this.switchTurns();\r\n        // handling the wrong ball\r\n      } else if (\r\n      !hasStripes && this.currentPlayer.stripes ||\r\n      !hasSolids && this.currentPlayer.solids)\r\n      {\r\n        this.switchTurns();\r\n      }\r\n      // scratching with no other pocketed balls\r\n    } else if (isCue) {\r\n      this.messageScratch();\r\n      this.switchTurns();\r\n      // switching turns on nothing going in\r\n    } else {\r\n      this.switchTurns();\r\n    }\r\n    // ending the turn\r\n    this.pocketedThisTurn = [];\r\n    if (winner) {\r\n      this.messageWin(winner);\r\n      this.handleGameOver();\r\n    } else {\r\n      this.messageTurn();\r\n    }\r\n    if (this.isMachine) {\r\n      let aMachineBall = this.aMachineBall;\r\n      this.machine.reset(aMachineBall.body.position, this.placingCueball);\r\n    }\r\n    this.updateDOM();\r\n  }\r\n\r\n  handleGameOver() {\r\n    this.gameOver = true;\r\n    let $button = document.createElement('button');\r\n    $button.innerHTML = 'New Game';\r\n    $button.addEventListener('click', () => {\r\n      $button.remove();\r\n      this.reset();\r\n    });\r\n    document.body.appendChild($button);\r\n  }\r\n\r\n  messageTurn() {\r\n    this.messages.push(this.currentPlayer.turnText);\r\n  }\r\n\r\n  messageScratch() {\r\n    this.messages.push(this.currentPlayer.scratchText);\r\n  }\r\n\r\n  messageInvalidContact() {\r\n    this.messages.push(this.currentPlayer.invalidContactText);\r\n  }\r\n\r\n  messageEight() {\r\n    this.messages.push(this.currentPlayer.eightText);\r\n  }\r\n\r\n  messageWin(winner) {\r\n    this.messages.push(winner.winText);\r\n  }\r\n\r\n  restBalls() {\r\n    this.ballIds.forEach(id => this.balls[id].rest());\r\n  }\r\n\r\n  strikeCueball() {\r\n    this.break = false;\r\n    this.moving = true;\r\n    let power = this.isMachine ? this.machine.power : this.power;\r\n    let vol = Math.min(1, power) * 0.9 + 0.1;\r\n    this.sounds.cue.volume(vol);\r\n    this.sounds.cue.play();\r\n    Body.applyForce(\r\n    this.cueball.body,\r\n    this.cueball.body.position,\r\n    { x: this.canvas.forceX, y: this.canvas.forceY });\r\n\r\n  }\r\n\r\n  setupCueball() {\r\n    this.cueball.disable();\r\n    this.placingCueball = true;\r\n  }\r\n\r\n  placeCueball() {\r\n    this.cueball.enable();\r\n    this.cueball.pocketed = false;\r\n    this.placingCueball = false;\r\n  }\r\n\r\n  moveCueball(x, y) {\r\n    if (this.moving) {\r\n      x = rel(TABLE_W / 2);\r\n      y = rel(TABLE_H + WALL_DI + RETURN_H * 0.5);\r\n    } else {\r\n      let maxX = this.break ? rel(TABLE_W / 4 - BALL_RAD) : rel(TABLE_W - BALL_RAD),\r\n      minX = rel(0 + BALL_RAD),\r\n      maxY = rel(TABLE_H - BALL_RAD),\r\n      minY = rel(0 + BALL_RAD);\r\n      x = Math.min(maxX, Math.max(minX, x));\r\n      y = Math.min(maxY, Math.max(minY, y));\r\n    }\r\n    this.cueball.setVelocity({ x: 0, y: 0 });\r\n    Body.setPosition(this.cueball.body, { x, y });\r\n  }\r\n\r\n  tickPower() {\r\n    if (this.mousedown) {\r\n      this.power += this.powerStep * this.powerDirection;\r\n      if (this.power < 0) {\r\n        this.powerDirection = 1;\r\n        this.power = 0;\r\n      } else if (this.power > 1) {\r\n        this.powerDirection = -1;\r\n        this.power = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateDOM() {\r\n    let current = this.currentPlayerIdx % 2;\r\n    this.$score.innerHTML =\r\n    this.updatePlayerDOM(this.players[0], current === 0) +\r\n    this.updatePlayerDOM(this.players[1], current === 1);\r\n    this.$message.innerHTML = '<p>' + this.messages.map(m => m).join(' ') + '</p>';\r\n  }\r\n\r\n  updatePlayerDOM(player, current) {\r\n    return `<span>\r\n  <span>${player.nameText}</span>\r\n  <span>${player.points}</span>\r\n</span>`;\r\n  }\r\n\r\n  switchTurns() {\r\n    this.currentPlayerIdx++;\r\n  }\r\n\r\n  checkMovement() {\r\n    if (this.moving) {\r\n      let moving = false;\r\n      for (let i = 0, len = this.ballIds.length; i < len && !moving; i++) {\r\n        let ballId = this.ballIds[i];\r\n        let ball = this.balls[ballId];\r\n        if (ball.body && ball.body.speed > 0.125) moving = true;\r\n      }\r\n      this.moving = moving;\r\n    }\r\n  }\r\n\r\n  get aMachineBall() {\r\n    let balls = this.ballIds.map(id => this.balls[id]).filter(b => !b.pocketed);\r\n    if (this.players[1].onEight) {\r\n      balls = [this.eightball];\r\n    } else if (this.players[1].stripes) {\r\n      balls = balls.filter(b => b.stripes);\r\n    } else if (this.players[1].solids) {\r\n      balls = balls.filter(b => b.solids);\r\n    } else {\r\n      balls = balls.filter(b => !b.cue && !b.eight);\r\n    }\r\n    return balls[Math.floor(Math.random() * balls.length)];\r\n  }\r\n\r\n  get cueball() {\r\n    return this.balls[this.cueId];\r\n  }\r\n\r\n  get eightball() {\r\n    return this.balls[this.eightId];\r\n  }\r\n\r\n  get ballNumbers() {\r\n    return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n  }}\r\n\r\n\r\n// create a world and engine\r\nlet world = World.create({ gravity: { x: 0, y: 0 } });\r\nlet engine = Engine.create({ world, timing: { timeScale: 1 } });\r\n\r\n// create a renderer\r\nlet element = document.querySelector('div.canvas');\r\nlet render = Render.create({\r\n  element, engine,\r\n  options: {\r\n    width: VIEW_W,\r\n    height: VIEW_H,\r\n    wireframes: WIREFRAMES,\r\n    background: COLORS.frame } });\r\n\r\n\r\n\r\nif (window.location.href.match(/cpgrid/)) {\r\n  document.body.classList.add('screenshot');\r\n  let src = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/111863/billiards.png';\r\n  let img = new Image();\r\n  img.src = src;\r\n  document.body.appendChild(img);\r\n} else {\r\n  let canvas = new Canvas(render);\r\n  let mouse = Mouse.create(render.canvas);\r\n  let sounds = {\r\n    cue: new Howl({ src: [ASSET_PREFIX + 'billiards-cue.mp3', ASSET_PREFIX + 'billiards-cue.ogg'] }),\r\n    ball: new Howl({ src: [ASSET_PREFIX + 'billiards-ball.mp3', ASSET_PREFIX + 'billiards-ball.ogg'] }),\r\n    rail: new Howl({ src: [ASSET_PREFIX + 'billiards-rail.mp3', ASSET_PREFIX + 'billiards-rail.ogg'] }) };\r\n\r\n  let game = new Game({ world, canvas, sounds });\r\n\r\n  Events.on(render, 'afterRender', () => {\r\n    game.handleTickAfter({ x: mouse.position.x, y: mouse.position.y });\r\n  });\r\n\r\n  let constraint = MouseConstraint.create(engine, { mouse });\r\n  Events.on(constraint, 'mousedown', ({ mouse }) => {\r\n    game.handleMousedown();\r\n  });\r\n  Events.on(constraint, 'mouseup', ({ mouse }) => {\r\n    game.handleMouseup();\r\n  });\r\n\r\n  Events.on(engine, 'collisionActive', e => {\r\n    game.handleCollisionActive({ pairs: e.pairs });\r\n  });\r\n\r\n  Events.on(engine, 'collisionStart', e => {\r\n    game.handleCollisionStart({ pairs: e.pairs });\r\n  });\r\n\r\n  // run the engine\r\n  Engine.run(engine);\r\n\r\n  // run the renderer\r\n  Render.run(render);\r\n}\r\n\r\n\r\nfunction rel(x) {\r\n  return x + WALL_DI;\r\n}\r\n\r\nfunction initEscapedBodiesRetrieval(allBodies) {\r\n  function hasBodyEscaped(body) {\r\n    let { x, y } = body.position;\r\n    return x < 0 || x > VIEW_W || y < 0 || y > VIEW_H;\r\n  }\r\n\r\n  setInterval(() => {\r\n    let i, body;\r\n    for (i = 0; i < allBodies.length; i++) {\r\n      body = allBodies[i];\r\n      if (hasBodyEscaped(body)) game.handleEscapedBall(body.id);\r\n    }\r\n  }, 300);\r\n}\r\n//# sourceURL=pen.js"]}